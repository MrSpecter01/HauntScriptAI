"""
Contains 3 functions to generate prompts using AI
1. rephrase_prompt(custom_prompt:str)
    takes 1 string as an argument and returns 1 string.
    input is a custom user prompt and the output is a rephrased version of the input.
2. craft_horror_prompt(genre: str, character: str, situation: str, num_lines: int, references: str, vocab: str, context:str) -> str:
    takes 6 string + 1 integer arguments and returns 1 string.
    inputs are genre, character_name, situation, num_lines, references, vocab, context and output is a proper prompt generated by AI using the inputs.
3. visual_prompt(story_text):
    takes 1 string as an argument and returns 1 string.
    input is a story and the output is a prompt to generate an image that depictes the story 
"""

import os
from dotenv import load_dotenv
import google.generativeai as genai

# Load API key from .env
load_dotenv()
api_key = os.getenv("api_key")
genai.configure(api_key=api_key)

# Gemini model config (Flash Lite)
generation_config = {
    "temperature": 0.4,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 1024,
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-2.0-flash",
    generation_config=generation_config,
)

def rephrase_prompt(custom_prompt:str) -> str:
    """Uses Gemini 2.0 Flash to generate a re-phrased custom horror story prompt given by the user."""
    user_message = (
        f"Create a single well-structured prompt suitable for an AI horror story generator based on the given user's starter prompt: {custom_prompt}"
    )

    # Gemini instruction for crafting prompts
    system_instruction = (
    "You are an expert prompt engineer for horror story generation. "
    "Your job is to help the user rephrase their prompt to get effective response from an AI model "
    "Make sure the prompt is structured, creative, and well-suited to produce a chilling story."
    "do not add much extra details to the prompt, keep it clean."
    )

    try:
        response = model.generate_content([system_instruction, user_message])
        return response.text.strip()
    except Exception as e:
        return f"Error generating prompt: {e}"

def craft_horror_prompt(genre: str, character: str, situation: str, num_lines: int, references: str, vocab: str, context:str) -> str:
    """Uses Gemini 2.0 Flash to generate a horror story prompt based on the given inputs."""

    genre = "No specific genre" if genre == "None" else genre
    references = "No specific references" if references == "" else references
    vocab = "No specific vocabulary" if vocab == "None" else vocab+" style"
    context = "No extra context/info" if context == "" else context
    
    user_message = (
        f"Genre: {genre}\n"
        f"Main Character: {character}\n"
        f"Situation: {situation}\n"
        f"Desired Length: {num_lines} lines\n"
        f"References: {references}\n"
        f"Vocabulary: {vocab}\n"
        f"Context: {context}\n\n"
        "Create a single well-structured prompt suitable for an AI horror story generator based on the above details."
    )

    # Gemini instruction for crafting prompts
    system_instruction = (
    "You are an expert prompt engineer for horror story generation. "
    "Your job is to create a clear and vivid prompt for a story-writing AI, based on basic input data. "
    "Make sure the prompt is structured, creative, and well-suited to produce a chilling story."
    "do not add much extra details to the prompt, keep it clean and make sure to use the given input data"
    )

    try:
        response = model.generate_content([system_instruction, user_message])
        return response.text.strip()
    except Exception as e:
        return f"Error generating prompt: {e}"
    

def visual_prompt(story_text):
    """Uses Gemini 2.0 Flash to generate a horror story visual prompt based on the given story."""

    system_instruction = (
        "You are an assistant that transforms full horror stories into short, vivid visual prompts. "
        "Focus on the most important and creepy visual themes. Avoid naming characters. "
        "Output only a short scene description (one or two sentences) suitable for generating a book cover image."
    )

    user_input = (
        f"Here is a horror story. Analyze it carefully and write a visual description suitable for generating a horror book cover image:\n\n"
        f"{story_text}"
    )

    try:
        response = model.generate_content([system_instruction, user_input])
        return response.text.strip()
    except Exception as e:
        return f"Error generating prompt: {e}"

#propo = craft_horror_prompt("","jake","dark forest, with thick fog",5)

#print(propo)